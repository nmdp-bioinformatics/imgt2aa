#!/usr/local/bin/perl
############################################################################
# SCRIPT NAME:  mksnp
# DESCRIPTION:  read in aligned HLADB files; output snp
#
# DATE WRITTEN: 2012-08-13
# WRITTEN BY:   Martin Maiers
#
# REVISION HISTORY:
# REVISION DATE         REVISED BY      DESCRIPTION
# ------- ----------    --------------  -------------------------------------
#
##############################################################################
use strict;
use warnings;

foreach my $file (`/bin/ls -1 *.db`) {
  chomp $file;
  if($file=~/(\w+).db/) {
    my $locus = $1;
    mksnp($locus);
  }
}
exit 0;


sub mksnp {
  my $locus = shift;
  my $dbfile = "$locus.db";
  my $snpfile = "$locus.snp";

  print "creating $snpfile from $dbfile\n";

  my %Seq;
  open PEP, $dbfile or die "$0: $dbfile: $!\n";
  my $maxlength = 0;
  while(<PEP>) {
    chomp;
    my($loc, $allele, $AAseq, $NUCseq) = split /	/; # tab
    $loc = "C" if $loc eq "Cw";
    next unless $locus =~/^$loc/i;

    my $len = length($NUCseq);
    $maxlength = $len if $maxlength < $len;
    $Seq{$allele} = uc $NUCseq;	# upper-case
  }   

  #
  # count nucleotides that vary
  #
  my @pos;
  my ($offset, $s_nucl, $e_nucl);
  if($locus =~/^A/i || $locus =~/^B/i || $locus=~/^C/i) {
    print STDERR "class 1 style\n";
    $offset =  0; 
    $s_nucl =  1;
    $e_nucl =  3* 183; # 180  # 183
  } elsif ($locus =~/^DRB/i) {
    print STDERR "class 2 style\n";
    $offset  = 0; 
    $s_nucl = 1; 
    $e_nucl = 3*90;
  } elsif ($locus =~/^DQB1/i) {
    print STDERR "class 2 style\n";
    $offset  = 0;  
    $s_nucl = 1; 
    $e_nucl = 3*90;
  } elsif ($locus =~/^DQA1/i) {
    print STDERR "class 2 style\n";
    $offset  = 0;  
    $s_nucl = 1; 
    $e_nucl = 3*83;
  } elsif ($locus =~/^DPB1/i) {
    print STDERR "class 2 style\n";
    $offset  = 0;  
    $s_nucl = 1; 
    $e_nucl = 3*88;
  } elsif ($locus =~/^DPA1/i) {
    print STDERR "class 2 style\n";
    $offset  = 0;  
    $s_nucl = 1; 
    $e_nucl = 3*82;
  } else {
    die "unable to process locus: $locus\n";
  }
  for(my $i=0; $i<$maxlength; $i++) {
    my %CTaa;
    foreach my $allele (keys %Seq) {
      my $seq = $Seq{$allele};
      my $aa = substr($seq, $i, 1);
      next if $aa eq "*";
      next if $aa eq "X";
      $CTaa{$aa}++;
    }
    my $nucl = $i + $offset;
    next unless $nucl >=$s_nucl;
    next unless $nucl <=$e_nucl;
    next unless scalar(keys %CTaa)>1;
    push @pos, $nucl;
  }
  
  my %snp;
  foreach my $allele (keys %Seq) {
    foreach my $nuclpos (@pos) {
      my $s = substr($Seq{$allele}, $nuclpos - $offset,1).$nuclpos;
      push @{$snp{$allele}}, $s;
    }
  }

  open SNPFILE, ">$locus.snp" or die "$0: $! $locus.snp\n";
  foreach (sort keys %snp) {
    print SNPFILE join ('	', $locus, $_, join (' ', @{$snp{$_}})), "\n";
  }
  close SNPFILE;


  #
  # build snp database
  #
  open SNPDDL, ">$locus.ddl" or die "$0: $! $locus.ddl\n";
  my $loc = lc $locus;
  print SNPDDL qq/use antibody;
/;
  print SNPDDL qq/drop table t_snp_$loc;
/;
  print SNPDDL qq/create table t_snp_$loc (
  allele char(8)
/;
  foreach my $nuclpos (@pos) {
    print SNPDDL " ,snp_$nuclpos char(1)\n";
  }
  print SNPDDL " ,index (allele));\n";
  print SNPDDL "\n\n";

  my $sql = "insert into t_snp_$loc (allele\n";
  foreach my $nuclpos (@pos) {
    $sql.=" ,snp_$nuclpos\n";
  }
  $sql.=")\nvalues\n(";
  
  foreach my $allele (sort keys %snp) {
    my $allele_sql = $sql;
    $allele_sql.= qq/"$allele"/;
    foreach my $s (@{$snp{$allele}}) {
      my $nucl  = substr($s, 0, 1);
      $allele_sql.= qq/,"$nucl"/; 
    }
    $allele_sql.=qq/);/;
    print SNPDDL "$allele_sql\n";
  }
}

